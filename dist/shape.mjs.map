{
  "version": 3,
  "sources": ["../src/shape.ts"],
  "sourcesContent": ["/**\n * @srhazi/shape: A handy way of asserting the shape of unknown values.\n */\n\nexport const version: string = LIB_VERSION;\n\n/**\n * Each IsShape<T> is a function that proves an unknown value is of type T\n */\nexport type IsShape<T> = (val: unknown) => val is T;\n\n/**\n * Given an IsShape<T> function, ShapeType<typeof isMyShape> gives you the type asserted by the shape.\n */\nexport type ShapeType<V> = V extends IsShape<infer A> ? A : never;\n\nexport const isString: IsShape<string> = (val): val is string =>\n    typeof val === 'string';\n\nexport const isNumber: IsShape<number> = (val): val is number =>\n    typeof val === 'number';\n\nexport const isBigint: IsShape<bigint> = (val): val is bigint =>\n    typeof val === 'bigint';\n\nexport const isBoolean: IsShape<boolean> = (val): val is boolean =>\n    typeof val === 'boolean';\n\nexport const isSymbol: IsShape<symbol> = (val): val is symbol =>\n    typeof val === 'symbol';\n\nexport const isUndefined: IsShape<undefined> = (val): val is undefined =>\n    val === undefined;\n\nexport const isNull: IsShape<null> = (val): val is null => val === null;\n\nexport const isArray: IsShape<unknown[]> = (val): val is unknown[] =>\n    Array.isArray(val);\n\nexport const isFunction: IsShape<() => unknown> = (val): val is () => unknown =>\n    typeof val === 'function';\n\n/**\n * Produces a check that the value is exactly the constant provided.\n */\nexport function isExact<const T>(constant: T): (val: unknown) => val is T {\n    return isEnum(constant);\n}\n\n/**\n * Produces a check that the value is one of exactly the constants provided.\n */\nexport function isEnum<const T>(...values: T[]): (val: unknown) => val is T {\n    return (val: unknown): val is T => values.some((which) => which === val);\n}\n\n/**\n * Produces a check that satisfies one of the provided checks.\n */\nexport function isEither<X extends IsShape<any>[]>(\n    ...checks: X\n): (val: unknown) => val is ShapeType<X[number]> {\n    return (val: unknown): val is ShapeType<X[number]> => {\n        return checks.some((check) => check(val));\n    };\n}\n\n/**\n * Produces a check that the value is an array of items that satisfy the provided checks.\n */\nexport function isArrayOf<T>(check: IsShape<T>): (val: unknown) => val is T[] {\n    return (val: unknown): val is T[] => {\n        return Array.isArray(val) && val.every((item) => check(item));\n    };\n}\n\n/**\n * Produces a check that the value is an object containing keys that map to checks.\n */\nexport function isShape<T extends Record<string, IsShape<any>>>(\n    shape: T\n): IsShape<{ [Key in keyof T]: ShapeType<T[Key]> }> {\n    return (val: unknown): val is { [Key in keyof T]: ShapeType<T[Key]> } => {\n        if (typeof val !== 'object') {\n            return false;\n        }\n        if (!val) {\n            return false;\n        }\n        for (const [key, check] of Object.entries(shape)) {\n            if (!(key in val)) {\n                return false;\n            }\n            if (!check((val as Record<string, any>)[key])) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\n"],
  "mappings": ";AAIO,IAAM,UAAkB;AAYxB,IAAM,WAA4B,CAAC,QACtC,OAAO,QAAQ;AAEZ,IAAM,WAA4B,CAAC,QACtC,OAAO,QAAQ;AAEZ,IAAM,WAA4B,CAAC,QACtC,OAAO,QAAQ;AAEZ,IAAM,YAA8B,CAAC,QACxC,OAAO,QAAQ;AAEZ,IAAM,WAA4B,CAAC,QACtC,OAAO,QAAQ;AAEZ,IAAM,cAAkC,CAAC,QAC5C,QAAQ;AAEL,IAAM,SAAwB,CAAC,QAAqB,QAAQ;AAE5D,IAAM,UAA8B,CAAC,QACxC,MAAM,QAAQ,GAAG;AAEd,IAAM,aAAqC,CAAC,QAC/C,OAAO,QAAQ;AAKZ,SAAS,QAAiB,UAAyC;AACtE,SAAO,OAAO,QAAQ;AAC1B;AAKO,SAAS,UAAmB,QAAyC;AACxE,SAAO,CAAC,QAA2B,OAAO,KAAK,CAAC,UAAU,UAAU,GAAG;AAC3E;AAKO,SAAS,YACT,QAC0C;AAC7C,SAAO,CAAC,QAA8C;AAClD,WAAO,OAAO,KAAK,CAAC,UAAU,MAAM,GAAG,CAAC;AAAA,EAC5C;AACJ;AAKO,SAAS,UAAa,OAAiD;AAC1E,SAAO,CAAC,QAA6B;AACjC,WAAO,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,SAAS,MAAM,IAAI,CAAC;AAAA,EAChE;AACJ;AAKO,SAAS,QACZ,OACgD;AAChD,SAAO,CAAC,QAAiE;AACrE,QAAI,OAAO,QAAQ,UAAU;AACzB,aAAO;AAAA,IACX;AACA,QAAI,CAAC,KAAK;AACN,aAAO;AAAA,IACX;AACA,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,KAAK,GAAG;AAC9C,UAAI,EAAE,OAAO,MAAM;AACf,eAAO;AAAA,MACX;AACA,UAAI,CAAC,MAAO,IAA4B,GAAG,CAAC,GAAG;AAC3C,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
